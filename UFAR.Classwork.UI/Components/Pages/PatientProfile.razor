@page "/profile"
@rendermode InteractiveServer
@inject NavigationManager NavManager
@using UFAR.Classwork.Data.DAO
@using UFAR.Classwork.Data.Entities
@using UFAR.Classwork.UI.Services

@inject IJSRuntime JsRuntime


@inject AuthenticationService AuthService

<style>
    .form-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        font-weight: bold;
        margin-bottom: 5px;
        display: block;
    }

    input, textarea {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        margin-top: 15px;
        padding: 10px 20px;
        font-size: 16px;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #0056b3;
        }

    .page-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
    }

    .title {
        text-align: center;
        font-family: Arial, sans-serif;
        font-size: 32px;
        color: #333;
    }

    .apply-button {
        display: block;
        margin: 20px auto;
    }

    .patient-form {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

        .form-group label {
            margin-bottom: 5px;
            font-weight: bold;
        }

    .form-control {
        padding: 10px;
        border-radius: 4px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    .submit-button {
        grid-column: span 2;
        margin-top: 50px;
        justify-self: center;
    }

    .validation-summary {
        grid-column: span 2;
        color: red;
        margin-bottom: 20px;
    }
</style>


<PageTitle>Patient Profile</PageTitle>

<h3>Patient Profile</h3>

@if (patient == null && !isLoading)
{
    <p>Loading your profile...</p>
}
else if (patient == null && isLoading)
{
    <p>Redirecting to login...</p>
}
else
{

    <div>
        <p><strong>Name:</strong> @patient.Name</p>
        <p><strong>Surname:</strong> @patient.Surname</p>
        <p><strong>Email:</strong> @patient.Email</p>
        <p><strong>Status:</strong> @patient.Status</p>
        @if (patient.Status == "Active")
        {
            <p><a href="@PdfPath" target="_blank">View Sick Leave Form</a></p>
        }
    </div>
    <RadzenButton Click="@OpenForm"
                  Text="Apply for Sick Leave"
                  ButtonStyle="ButtonStyle.Primary"
                  Size="ButtonSize.Large"
                  class="apply-button" />

    @if (isFormVisible)

    {
        <div class="form-container">
            <EditForm Model="patient" OnValidSubmit="UpdatePatientAccount">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText id="name" class="form-control" @bind-Value="patient.Name" Disabled />
                </div>

                <div class="form-group">
                    <label for="surname">Surname:</label>
                    <InputText id="surname" class="form-control" @bind-Value="patient.Surname" Disabled />
                </div>

                <div class="form-group">
                    <label for="dob">Date of Birth:</label>
                    <InputDate id="dob" class="form-control" @bind-Value="patient.DOB" Disabled />
                </div>

                <div class="form-group">
                    <label for="email">Email:</label>
                    <InputText id="email" class="form-control" @bind-Value="patient.Email" Disabled />
                </div>

                <div class="form-group">
                    <label for="position">Position:</label>
                    <InputText id="position" class="form-control" @bind-Value="patient.Position" />
                </div>

                <div class="form-group">
                    <label for="department">Department:</label>
                    <InputText id="department" class="form-control" @bind-Value="patient.Departement" placeholder="Your departmement" />
                </div>

                <div class="form-group">
                    <label for="illness">Illness:</label>
                    <InputText id="illness" class="form-control" @bind-Value="patient.Illness" />
                </div>

                <div class="form-group">
                    <label for="illness-description">Illness Description:</label>
                    <InputTextArea id="illness-description" class="form-control" @bind-Value="patient.IllnessDescription" rows="4" />
                </div>

                <button type="submit">Apply </button>
            </EditForm>
        </div>
    }
}



@code {
    private PatientAccount? patient;
    private bool isLoading = false;
    private bool isFormVisible = false;
    private string PdfPath => $"/Sick_Leave_Request_{patient?.ID}.pdf";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieve the email from localStorage after the initial render
            var loggedInEmail = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "loggedInEmail");

            if (string.IsNullOrEmpty(loggedInEmail))
            {
                isLoading = true;
                NavManager.NavigateTo("/");
                return;
            }

            // Fetch the authenticated user details
            patient = await AuthService.GetAuthenticatedUserAsync(loggedInEmail);

            if (patient == null)
            {
                isLoading = true;
                NavManager.NavigateTo("/");
            }

            StateHasChanged(); // Notify the UI about the changes
        }
    }

    private void OpenForm()

    {

        isFormVisible = true;

    }
    private async Task UpdatePatientAccount()
    {
        try
        {
            var success = await AuthService.UpdatePatientAccountAsync(patient);

            if (success)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Profile updated successfully!");
                patient.Status = "Pending";
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error updating profile.");
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }


}
